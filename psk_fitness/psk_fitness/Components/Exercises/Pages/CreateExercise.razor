@page "/edit-exercise"
@page "/edit-exercise/{exerciseId:int}"
@using System.Text.Json
@using Microsoft.Extensions.Logging
@using psk_fitness.Data
@using psk_fitness.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserRepository userRepository

@inject IExerciseRepository ExerciseRepository

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" @onclick="OpenModal">
    New Exercise
</button>

<div class="@ModalDisplayClass" tabindex="-1" aria-labelledby="newExerciseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content custom-background">
            <div class="modal-header custom-background">
                <h5 class="modal-title" id="newExerciseModalLabel">@ModalTitle</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <EditForm Model="exerciseDTO" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="modal-body custom-background">
                    <div class="mb-3 d-flex align-items-center">
                        <label for="exerciseName" class="form-label me-1" style="margin-bottom: 0;">Name:</label>
                        <InputText @bind-Value="exerciseDTO.Title" class="form-control" style="width: 100%" required />
                    </div>
                    <div class="mb-3">
                        <label for="exerciseDescription" class="form-label">Description:</label>
                        <textarea @bind="exerciseDTO.Description" class="form-control" style="width: 100%" required></textarea>
                    </div>
                    <div class="mb-3 d-flex align-items-center">
                        <label for="exerciseTimeHours" class="form-label">Time:</label>
                        <InputNumber @bind-Value="exerciseDTO.DurationHours" style="width: 67px;" min="0" max="23" />
                        <InputNumber @bind-Value="exerciseDTO.DurationMinutes" style="width: 67px;" min="0" max="59" />
                        <InputNumber @bind-Value="exerciseDTO.DurationSeconds" style="width: 67px;" min="0" max="59" />
                        <div style="width:40px"></div>
                        <label for="exerciseSets" class="form-label mx-1">Sets:</label>
                        <InputNumber @bind-Value="exerciseDTO.Sets" style="width: 65px;" min="0" />
                        <label for="exerciseReps" class="form-label mx-1">Reps:</label>
                        <InputNumber @bind-Value="exerciseDTO.Reps" style="width: 65px;" min="0" />
                    </div>
                    <div class="mb-3">
                        <label for="exerciseNotes" class="form-label">Notes:</label>
                        <textarea @bind="exerciseDTO.Notes" class="form-control" style="width: 100%"></textarea>
                    </div>
                    <div class="mb-3 d-flex align-items-center">
                        <label class="form-label me-2">Steps:</label>
                        <button type="button" class="btn btn-primary btn-sm me-2" @onclick="AddStep" style="height: 30px; width: 30px;">+</button>
                    </div>
                    <div class="mb-3">
                        @foreach (var step in steps)
                        {
                            <div class="step-container d-flex align-items-center">
                                <label class="form-label me-2">@($"{steps.IndexOf(step) + 1}.")</label>
                                <InputText Value="@step" ValueChanged="@(value => UpdateStep(value, step))" ValueExpression="@(() => step)" class="form-control mb-2" style="width: 100%;" />
                                <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="@(() => RemoveStep(step))" style="height: 30px; width: 30px;">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <div class="text-danger">@errorMessage</div>
                    <div class="modal-footer custom-background">
                        <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<style>
    .custom-background {
        background-color: #F5E9B0; /* Matching background color */
        border-radius: 10px;
        padding: 10px;
    }
</style>

@code {
    [Parameter] public int? exerciseId { get; set; }
    [Parameter] public EventCallback OnExerciseCreated { get; set; }

    private ExerciseCreateDTO exerciseDTO = new ExerciseCreateDTO();
    private List<string> steps = new List<string>();
    private bool isModalOpen = false;
    private string errorMessage;

    private string ModalTitle => exerciseId.HasValue && exerciseId.Value != 0 ? "Edit Exercise" : "Create New Exercise";
    private string SubmitButtonText => exerciseId.HasValue && exerciseId.Value != 0 ? "Save" : "Create";
    private string ModalDisplayClass => isModalOpen ? "modal fade show d-block" : "modal fade";

    protected override async Task OnParametersSetAsync()
    {
        if (exerciseId.HasValue && exerciseId.Value != 0)
        {
            var exercise = await ExerciseRepository.GetExerciseAsync(exerciseId.Value);
            if (exercise != null)
            {
                exerciseDTO = new ExerciseCreateDTO
                    {
                        Title = exercise.Title,
                        Description = exercise.Description,
                        DurationHours = exercise.DurationHours,
                        DurationMinutes = exercise.DurationMinutes,
                        DurationSeconds = exercise.DurationSeconds,
                        Sets = exercise.Sets,
                        Reps = exercise.Reps,
                        Notes = exercise.Notes,
                        Steps = exercise.Steps,
                        ApplicationUserId = exercise.ApplicationUserId
                    };
                steps = exerciseDTO.Steps.Split('>').ToList();
            }
        }
        else
        {
            ResetModal();
        }
    }

    public async Task OpenModalForEdit(int exerciseId)
    {
        this.exerciseId = exerciseId;
        await OnParametersSetAsync();
        OpenModal();
    }

    private void OpenModal()
    {
        isModalOpen = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        ResetModal();
        isModalOpen = false;
        StateHasChanged();
    }

    private void AddStep()
    {
        steps.Add(string.Empty);
    }

    private void RemoveStep(string step)
    {
        steps.Remove(step);
    }

    private void UpdateStep(string value, string oldStep)
    {
        int index = steps.IndexOf(oldStep);
        if (index >= 0 && index < steps.Count)
        {
            steps[index] = value;
        }
    }

    private async Task HandleSubmit()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity.Name;
        ApplicationUser user = userRepository.GetUserByIdAsync(userEmail).Result;


        exerciseDTO.Steps = string.Join(">", steps); // Combine steps into a single string

        // Custom validation
        if (steps.Count == 0 || steps.All(string.IsNullOrWhiteSpace))
        {
            errorMessage = "Exercise must have at least one step.";
            return;
        }

        errorMessage = string.Empty;

        if (exerciseId.HasValue && exerciseId.Value != 0)
        {
            await ExerciseRepository.UpdateExerciseAsync(exerciseId.Value, exerciseDTO);
        }
        else
        {
            exerciseDTO.ApplicationUserId = user.Id;
            await ExerciseRepository.AddExerciseAsync(exerciseDTO);
        }
        await OnExerciseCreated.InvokeAsync(null); // Notify parent component

        // Clear form after submission
        ResetModal();
        CloseModal();
    }

    private void ResetModal()
    {
        exerciseDTO = new ExerciseCreateDTO();
        steps.Clear();
        exerciseId = null;
    }
}

