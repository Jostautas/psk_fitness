@page "/calendar"
@using System.Globalization
@rendermode InteractiveServer
<Modal @ref="modalRef" />
@{
    CultureInfo culture = new CultureInfo("en-US"); //Default to en-US calendar
}


<PageTitle>Calendar</PageTitle>


<h3>Calendar</h3>


<h4>@(char.ToUpper(DateTime.Now.ToString("MMMM", culture)[0]) + DateTime.Now.ToString("MMMM", culture).Substring(1))</h4>

<div>
    <select @bind="selectedWorkoutType">
        <option value="">All</option>
        @foreach (var type in workoutTypes)
        {
            <option value="@type">@type</option>
        }
    </select>
</div>

<div class="calendar">
    @for (var day = 1; day <= DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month); day++)
    {
        Workout? workout = GetWorkoutByDay(day);
        @if (selectedWorkoutType == "" || (workout != null && workout.WorkoutType == selectedWorkoutType))
        {
            <div class="calendar-day" @onmouseover="() => SetHoveredWorkout(workout)" @onmouseleave="() => SetHoveredWorkout(null)">
                <span class="day">@day</span>
                @if (workout != null)
                {
                    <div class="workout-box">
                        <span>@workout.WorkoutType</span>
                        <button class="edit-button" @onclick="() => OpenModal(workout)">Edit</button>
                    </div>
                    @if (!workout.Finished)
                        {
                            <div class="circle red"></div>
                        }
                        else
                        {
                            <div class="circle green"></div>
                        }
                }
                else
                {
                    <div class="workout-box">
					    <span>Rest</span>
                        <button class="edit-button" @onclick="() => OpenModal()">Create</button>
				    </div>
                }
            </div>
        }
    }
</div>


@code {
    private Modal modalRef;
    private List<Workout> workouts = new List<Workout>(); //TODO: Get from DB
    private Workout? hoveredWorkout;

    private string selectedWorkoutType = "";
    private List<string> workoutTypes;  //TODO: Get from DB, probably id to readable words enum


    protected override void OnInitialized()
    {
        GenerateRandomWorkouts(3); //Remove after connecting to DB
        workoutTypes = workouts.Select(w => w.WorkoutType).Distinct().ToList();

    }


    //TODO: Make Default values, or change to use create method
    private async Task OpenModal()
    {
        Workout singleDayWorkout = new Workout()
            {
                WorkoutType = "Chest",
                WorkoutStartHour = 1,
                WorkoutEndHour = 2,
                WorkoutStartMinute = 30,
                WorkoutEndMinute = 30,
                WorkoutNotes = "Notes"
            };

        await modalRef.OpenAsync(singleDayWorkout);
    }

    private async Task OpenModal(Workout workout)
    {
        await modalRef.OpenAsync(workout);
    }


    //Remove after connecting to DB
    private void GenerateRandomWorkouts(int count)
    {
        Random random = new Random();
        for (int i = 0; i < count; i++)
        {
            int randomDay = random.Next(1, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month) + 1);
            DateTime date = new DateTime(DateTime.Now.Year, DateTime.Now.Month, randomDay);
            Workout singleDayWorkout = new Workout()
                {
                    WorkoutType = "Chest",
                    WorkoutStartHour = random.Next(24),
                    WorkoutEndHour = random.Next(24),
                    WorkoutStartMinute = random.Next(60),
                    WorkoutEndMinute = random.Next(60),
                    WorkoutNotes = "Notes",
                    Finished = random.Next(2) == 1,
                    Date = date
                };
            workouts.Add(singleDayWorkout);
        }   
    }

    //TODO: Probably will have to check if not null
    private Workout? GetWorkoutByDay(int day)
    {
        return workouts.FirstOrDefault(workout => workout.Date.Day == day);
    }

    private void SetHoveredWorkout(Workout? workout)
    {
        hoveredWorkout = workout;
    }

}

