@page "/calendar"
@using System.Globalization
@rendermode InteractiveServer
<Modal @ref="modalRef" />
@{
    CultureInfo culture = new CultureInfo("en-US"); //Default to en-US calendar
}


<PageTitle>Calendar</PageTitle>


<h3>Calendar</h3>


<h4>@(char.ToUpper(DateTime.Now.ToString("MMMM", culture)[0]) + DateTime.Now.ToString("MMMM", culture).Substring(1))</h4>


<div class="calendar">
    @for (var day = 1; day <= DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month); day++)
    {
        Workout? workout = GetWorkoutByDay(day);

            <div class="calendar-day" @onmouseover="() => SetHoveredWorkout(workout)" @onmouseleave="() => SetHoveredWorkout(null)">
                <span class="day">@day</span>
                @if (workout != null)
                {
                    <div class="workout-box">
                        <span>@workout.Title</span>
                        <button class="edit-button" @onclick="() => OpenModal(workout)">Edit</button>
                    </div>
                    @if (!workout.Finished)
                        {
                            <div class="circle red"></div>
                        }
                        else
                        {
                            <div class="circle green"></div>
                        }
                }
                else
                {
                    <div class="workout-box">
					    <span>Rest</span>
                        <button class="edit-button" @onclick="() => OpenModal()">Create</button>
				    </div>
                }
            </div>
        
    }
</div>


@code {

    @inject IWorkoutRepository workoutRepository;

    private Modal modalRef;
    private List<Workout> workouts;
    private Workout? hoveredWorkout;


    protected override void OnInitialized()
    {
        workouts = workoutRepository.GetAllWourkoutsAsync().Result;
    }


    private async Task OpenModal()
    {
        WorkoutDisplayDTO selectedWorkout = new WorkoutDisplayDTO();

        await modalRef.OpenAsync(selectedWorkout);
    }

    private async Task OpenModal(Workout workout)
    {
        WorkoutDisplayDTO selectedWorkout = new WorkoutDisplayDTO();

        await modalRef.OpenAsync(selectedWorkout);
    }

    private Workout? GetWorkoutByDay(int day)
    {
        return workouts.FirstOrDefault(workout => workout.Date.Day == day);
    }

    private void SetHoveredWorkout(Workout? workout)
    {
        hoveredWorkout = workout;
    }

}

