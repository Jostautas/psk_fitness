@page "/topics"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using psk_fitness.Data
@using Microsoft.AspNetCore.Components.Authorization
@using psk_fitness.ClientServices
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ITopicFriendService TopicFriendService

<PageTitle>Topics</PageTitle>

<h3>My Topics</h3>

<div class="d-flex flex-column">
    <div class="d-flex align-items-center">
        <div class="dropdown me-2">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Personal
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#">Personal</a></li>
                <li><a class="dropdown-item" href="#">Invited</a></li>
            </ul>
        </div>
        <CreateTopic OnUserCreated=@FetchUserTopicsAsync/>
    </div>
</div>

@if (_topicsToDisplay != null) {
<div class="container mt-4">
    <div class="row">
        @foreach (TopicDisplayDTO topic in _topicsToDisplay)
        {
            <div class="col-md-2">
                <div class="card mb-3 text-center topic-card-size ratio ratio-1x1 max-card-width" style=@($"background-color: {topic.CssColor}")>
                    <div class="card-body d-flex justify-content-center align-items-center">
                        <h1 class="card-title text-wrap card-title-adj">@topic.Title</h1>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
}
else {
    <h1>Loading in progress</h1>
}
@if (user != null)
{   
    <div class="container">
        <h3>Add a Friend to a Topic</h3>
            
        <form method="post" onsubmit="HandleValidSubmit" name="AddFriendForm">
            <input type="hidden" asp-antiforgery="true" />
            <div class="form-group">
                <label for="topicId">Topic ID:</label>
                <input type="number" asp-for="addFriendModel.TopicId" id="topicId" class="form-control" />
            </div>

            <div class="form-group">
                <label for="email">User Email:</label>
                <input type="email" asp-for="addFriendModel.Email" id="email" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Add Friend</button>
        </form>

    <h3>Accessible Topics</h3>

    @if (accessableTopicIdsToDisplay == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul>
            @foreach (var topicId in accessableTopicIdsToDisplay)
            {
                <li>@topicId</li>
            }
        </ul>
    }
    </div>
}
else
{
    <p>>Please log in to see the details</P>
}


<style>
    .card-title-adj {
        font-size: 90%;
        max-width: 100%;
        word-wrap: break-word;
    }
    .max-card-width {
        max-width: 200px;
    }
    .container {
        width: 80%;
        margin: auto;
        padding-top: 20px;
    }
    h3 {
        color: #333;
        border-bottom: 1px solid #ccc;
        padding-top: 10px;
        padding-bottom: 10px;
    }
    .form-group {
        margin-bottom: 15px;
    }
    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
    input[type="text"],
    input[type="number"],
    input[type="email"] {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    button.btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        padding: 10px 20px;
        color: white;
        border-radius: 5px;
        cursor: pointer;
    }
    button.btn-primary:hover {
        background-color: #0056b3;
    }
    ul {
        list-style-type: none;
        padding: 0;
    }
    li {
        padding: 8px;
        background-color: #f8f8f8;
        border-bottom: 1px solid #e7e7e7;
    }
</style>

@code {
    [Inject]
    public ITopicService TopicService {get; set;}
    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider {get; set;}
    private IEnumerable<TopicDisplayDTO> _topicsToDisplay;
    private ApplicationUser? user;
    private List<int>? accessableTopicIdsToDisplay;
    [SupplyParameterFromForm]
    public AddFriendModel? addFriendModel { get; set; }

    protected override async Task OnInitializedAsync(){
        await FetchUserTopicsAsync();

        addFriendModel ??= new();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaimsPrincipal = authState.User;

        if (userClaimsPrincipal.Identity.IsAuthenticated)
        {
            var userId = userClaimsPrincipal.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            user = await UserManager.FindByIdAsync(userId);
            accessableTopicIdsToDisplay = await TopicFriendService.GetAllAccessibleTopicsAsync(userId);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await TopicFriendService.AddTopicFriend(addFriendModel.TopicId, addFriendModel.Email);
            Console.WriteLine("Friend added successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public class AddFriendModel             // It may seem odd to have this model here instead of a DTO, but appearantly it's good practice
                                            // to have view-specific models contained only in that view component.
    {
        public int TopicId { get; set; }
        public string? Email { get; set; }
    }

    private async Task FetchUserTopicsAsync() {
        @* TODO: refetch when modal is closed *@
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity.Name;
        _topicsToDisplay = await TopicService.GetUserDisplayTopicsAsync(userEmail);
    }
}
