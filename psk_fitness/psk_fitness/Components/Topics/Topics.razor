@page "/topics"
@rendermode InteractiveServer

<PageTitle>Topics</PageTitle>

<h3>Topics</h3>

<div class="d-flex flex-column">
    <div class="d-flex align-items-center">
        <div class="dropdown me-2">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Personal
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#">Personal</a></li>
                <li><a class="dropdown-item" href="#">Invited</a></li>
            </ul>
        </div>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newTopicModal">
            New topic
        </button>
        <TopicModalForm OnTopicSubmission=@FetchUserTopicsAsync>
            @if (ModalMode.Equals("yes")) {
                <button type="submit" class="btn btn-primary">Create</button>
            }
            <button @onclick=PrintSomething type="submit" class="btn btn-primary">Modify</button>
        </TopicModalForm>
    </div>
</div>

@if (_topicsToDisplay != null) {
<div class="container mt-4 mx-0">
    <div class="row">
        @foreach (TopicDisplayDTO topic in _topicsToDisplay)
        {
            <div class="col-md-2 mx-3">
                <div @onclick=@(() => DeleteTopicAsync(topic.Id))
                    class="card hovered mb-3 text-center ratio ratio-1x1 max-card-width min-card-width" style=@($"background-color: {topic.CssColor}")>
                    <div class="card-body d-flex justify-content-center align-items-center">
                        <h1 class="card-title text-wrap card-title-adj">@topic.Title</h1>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
}
else {
    <h1>Loading in progress</h1>
}

<style>
    .card-title-adj {
        font-size: 90%;
        max-width: 100%;
        word-wrap: break-word;
    }
    .max-card-width {
        max-width: 200px;
    }
    .min-card-width {
        min-width: 100px !important;
    }
    .hovered:hover {
        cursor: pointer;
    }
</style>

@code {
    [Inject]
    public ITopicService TopicService {get; set;}
    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider {get; set;}

    public string ModalMode {get; set;}
    private IEnumerable<TopicDisplayDTO> _topicsToDisplay;

    protected override async Task OnInitializedAsync(){
        ModalMode = "no";
        await FetchUserTopicsAsync();
    }

    private async Task FetchUserTopicsAsync() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity.Name;
        _topicsToDisplay = await TopicService.GetUserDisplayTopicsAsync(userEmail);
    }

    private async void DeleteTopicAsync(int topicId) {
        await TopicService.DeleteTopicAsync(topicId);
        await FetchUserTopicsAsync();
    }

    @* private async void CreateTopicAsync(int userEmail) {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity.Name;
        await TopicService.CreateTopicAsync(CreateTopicModel, userEmail);
    } *@

    private void PrintSomething() {
        Console.WriteLine("Printed");
    }
}
