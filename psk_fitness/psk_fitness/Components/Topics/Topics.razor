@page "/topics"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using psk_fitness.Data
@using Microsoft.AspNetCore.Components.Authorization
@using psk_fitness.ClientServices
@using System.Net;
@using System.Net.Http;
@inject IJSRuntime JSRuntime
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ITopicFriendService TopicFriendService

<PageTitle>Topics</PageTitle>

<h3>My Topics</h3>

<div class="d-flex flex-column">
    <div class="d-flex align-items-center">
        <div class="dropdown me-2">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Personal
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#">Personal</a></li>
                <li><a class="dropdown-item" href="#">Invited</a></li>
            </ul>
        </div>
        <button @onclick=@ManageCreateTopic type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newTopicModal">
            New topic
        </button>
        <TopicModalForm TopicHash=@(TopicModel.GetHashCode())>
            @if (_modalMode.Equals("create")) {
                <button @onclick=CreateTopicAsync type="submit" class="btn btn-primary" data-bs-dismiss="modal">Create</button>
            }
            else if (_modalMode.Equals("modify")) {
                <button @onclick=UpdateTopicAsync type="submit" class="btn btn-primary" data-bs-dismiss="modal">Modify</button>
                <button @onclick=DeleteTopicAsync type="submit" class="btn btn-danger" data-bs-dismiss="modal">Delete</button>

                <form method="post" @onsubmit="HandleValidSubmit" @formname="AddFriendForm">
                    <AntiforgeryToken />
                    <div class="form-group">
                        <label for="email">User Email:</label>
                        <InputText @bind-Value="addFriendModel!.Email" id="email" />
                    </div>
                    <div class="@textClass">
                        @displayText
                    </div>
                    <button type="submit" class="btn btn-primary">Add Friend</button>
                </form>
            }
            else {
                <p>Reached invalid state, pls test and fix</p>
            }
        </TopicModalForm>
    </div>
</div>

@if (_topicsToDisplay != null) {
<div class="container mt-4 mx-0">
    <div class="row">
        @foreach (var topic in _topicsToDisplay)
        {
            <div class="col-md-2 mx-3">
                <div
                    class="pointer-events-none card mb-3 text-center ratio ratio-1x1 max-card-width min-card-width" style=@($"background-color: {topic.CssColor}")>
                    <div class="card-header">
                        <div
                        @onclick=@(() => ManageSelectedTopic(topic))
                        class="pointer-events-all bi bi-pencil-square mx-auto icon-width"
                        data-bs-toggle="modal"
                        data-bs-target="#newTopicModal">
                        </div>
                    </div>
                    <div class="card-body d-flex justify-content-center align-items-center">
                        <h1 class="card-title text-wrap card-title-adj">@topic.Title</h1>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
}
else {
    <h1>Loading in progress</h1>
}
@if (user != null)
{   
    <div class="container">
    <h3>Accessible Topics</h3>

    @if (accessableTopicIdsToDisplay == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <ul>
            @foreach (var topicId in accessableTopicIdsToDisplay)
            {
                <li>@topicId</li>
            }
        </ul>
    }
    </div>
}
else
{
    <p>>Please log in to see the details</P>
}


<style>
    .card-title-adj {
        font-size: max(120%, 1.5vw);
        max-width: 100%;
        word-wrap: break-word;
    }
    .pointer-events-none {
        pointer-events: none;
    }
    .pointer-events-all {
        pointer-events: all;
    }
    .pointer-events-all:hover {
        cursor: pointer;
    }
    .max-card-width {
        max-width: 200px;
    }
    .min-card-width {
        min-width: 100px !important;
    }
    .icon-width {
        min-width: 25px;
        width: 25px;
        font-size: max(120%, 1.5vw);
    }
    .min-card-width {
        min-width: 100px !important;
    }
    .container {
        width: 80%;
        margin: auto;
        padding-top: 20px;
    }
    h3 {
        color: #333;
        border-bottom: 1px solid #ccc;
        padding-top: 10px;
        padding-bottom: 10px;
    }
    .form-group {
        margin-bottom: 15px;
    }
    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }
    input[type="text"],
    input[type="number"],
    input[type="email"] {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }
    button.btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        padding: 10px 20px;
        color: white;
        border-radius: 5px;
        cursor: pointer;
    }
    button.btn-primary:hover {
        background-color: #0056b3;
    }
    ul {
        list-style-type: none;
        padding: 0;
    }
    li {
        padding: 8px;
        background-color: #f8f8f8;
        border-bottom: 1px solid #e7e7e7;
    }
    .hovered:hover {
        cursor: pointer;
    }
</style>

@code {
    [Inject]
    ITopicClientService TopicClientService {get; set;}
    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider {get; set;}
    [Inject]
    StateContainer Container {get; set;}

    private static List<CssColor> _availableCssTopicColors { get; set; }
    = new() {
        new CssColor(CssColorMode.RGBA, (255, 150, 150).ToTuple()),
        new CssColor(CssColorMode.RGBA, (150, 255, 150).ToTuple()),
        new CssColor(CssColorMode.RGBA, (150, 150, 255).ToTuple()),    
    };
    public TopicDTO TopicModel {get; set;}

    private string _modalMode {get; set;} = "create";
    private IEnumerable<TopicDTO> _topicsToDisplay;

    private ApplicationUser user;

    private AddFriendModel addFriendModel;
    private string displayText = "";
    private string textClass = "d-none";

    private List<int> accessableTopicIdsToDisplay;

    protected override async Task OnInitializedAsync() {
        InitializeTopicModel();
        Container.PutObject(TopicModel, TopicModel.GetHashCode());
        await FetchUserTopicsAsync();

        addFriendModel ??= new();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaimsPrincipal = authState.User;

        if (userClaimsPrincipal.Identity.IsAuthenticated)
        {
            var userId = userClaimsPrincipal.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            user = await UserManager.FindByIdAsync(userId);
            accessableTopicIdsToDisplay = await TopicFriendService.GetAllAccessibleTopicsAsync(userId);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await TopicFriendService.AddTopicFriend(addFriendModel.TopicId, addFriendModel.Email);
            displayText = "Friend added.";
            textClass = "text-dark bg-success border border-dark p-3";
        }
        catch (Exception ex)
        {
            displayText = ex.Message;
            textClass = "text-dark bg-danger border border-dark p-3";
        }
    }

    public class AddFriendModel             // It may seem odd to have this model here instead of a DTO, but appearantly it's good practice
                                            // to have view-specific models contained only in that view component.
    {
        public int TopicId { get; set; }
        public string? Email { get; set; }
    }

    private async Task FetchUserTopicsAsync() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity.Name;
        _topicsToDisplay = await TopicClientService.GetUserTopicsAsync(userEmail);
    }

    private async Task DeleteTopicAsync()
    {
        try
        {
            var response = await TopicClientService.DeleteTopicAsync(TopicModel.Id);
            if (response.IsSuccessStatusCode)
            {
                await FetchUserTopicsAsync();
                await InvokeAsync(StateHasChanged);
            }
            else if (response.StatusCode == HttpStatusCode.InternalServerError)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Topic does not exist. Please reload the website.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred.");
            Console.WriteLine($"An unexpected error occurred: {ex.Message}");
        }
    }

    private void InitializeTopicModel() {
        TopicModel = new() {
        Title = "New Topic",
        Description = "New Topic Description",
        CssColor = new CssColor(CssColorMode.RGBA, (255, 150, 150).ToTuple())};
    }

    private async void CreateTopicAsync() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userEmail = authState.User.Identity.Name;
        await TopicClientService.CreateTopicAsync(TopicModel, userEmail);
        await FetchUserTopicsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async void UpdateTopicAsync() {
        await TopicClientService.UpdateTopicAsync(TopicModel);
        await FetchUserTopicsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void ManageSelectedTopic(TopicDTO topic) {
        _modalMode = "modify";
        TopicModel.Id = topic.Id;
        addFriendModel.TopicId = TopicModel.Id;
        TopicModel.Title = topic.Title;
        TopicModel.Description = topic.Description;
        TopicModel.CssColor = topic.CssColor;
    }

    private void ManageCreateTopic() {
        _modalMode = "create";
        TopicModel.Id = 0;
        TopicModel.Title = "";
        TopicModel.Description = "";
        TopicModel.CssColor = new CssColor(CssColorMode.RGBA, (255, 150, 150).ToTuple());
    }

    private async void DeleteTopicAsync(int topicId)
{
try
    {
        var response = await TopicClientService.DeleteTopicAsync(topicId);
        if (response.IsSuccessStatusCode)
        {
            await FetchUserTopicsAsync();
        }
        else if (response.StatusCode == HttpStatusCode.InternalServerError)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Topic does not exist. Please reload the website.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred.");
        }
    }
    catch (Exception ex)
    {
        displayText = "An unexpected error occurred.";
        textClass = "text-dark bg-danger border border-dark p-3";
        Console.WriteLine($"An unexpected error occurred: {ex.Message}");
    }
}
}
