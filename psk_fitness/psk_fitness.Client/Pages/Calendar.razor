@page "/calendar"
@using System.Globalization
@using psk_fitness.Client.Interfaces
@using System.Security.Claims

@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@{
    CultureInfo culture = new CultureInfo("en-US"); //Default to en-US calendar
}
@inject IWorkoutService WorkoutService
@inject ITopicService TopicService
@inject IExerciseService ExerciseService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>Calendar</h3>

<Modal @ref="Modal" Topics="@Topics" AvailableExercises="@Exercises"></Modal>

<button @onclick="() => Modal.Open()">Open Modal</button>

<h4>@(char.ToUpper(DateTime.Now.ToString("MMMM", culture)[0]) + DateTime.Now.ToString("MMMM", culture).Substring(1))</h4>


<div class="calendar">
    @for (var day = 1; day <= DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month); day++)
    {
        var workout = Workouts?.FirstOrDefault(w => w.Day == day);
        var currcentDay = day;

        <div class="calendar-day">
            <span class="day">@day</span>
            @if (workout == null)
            {
                <div class="workout-box">
                    <span>Rest</span>
                    <button class="edit-button" @onclick="() => Modal.Open(currcentDay)">Create</button>
                </div>
            }
            else
            {
                <div>
                    <span style="margin: 0 10px;">Ex1. @workout.ExerciseTitles.First()</span>
                </div>
                <div class="workout-box">

                    <span>@workout.Title</span>
                    <button class="edit-button" @onclick="() => Modal.Open(workout.Id, currcentDay)">Edit</button>
                </div>
            }

        </div>

    }
</div>

@code {
    Modal Modal { get; set; }

    List<WorkoutForCalendarDTO> Workouts { get; set; }
    IEnumerable<TopicForWorkoutDTO> Topics { get; set; }
    List<ExerciseForWorkoutDTO> Exercises { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaimsPrincipal = authState.User;

        if (userClaimsPrincipal.Identity.IsAuthenticated)
        {
            var userEmail = userClaimsPrincipal.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            Console.WriteLine("This is the email");
            Console.WriteLine(userEmail);
            Topics = await TopicService.GetTopicsForWorkout(userEmail);
            Exercises = await ExerciseService.GetExercisesForWorkout(userEmail);
            Workouts = await WorkoutService.GetByMonth(DateTime.Now.Year, DateTime.Now.Month, userEmail);

        }
        

        foreach (WorkoutForCalendarDTO ex in Workouts)
        {
            foreach(string title in ex.ExerciseTitles)
            {
                Console.WriteLine(title);
            }
        }
        Console.WriteLine(Workouts);
    }

}